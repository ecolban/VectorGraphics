g2.setColor(Color.BLACK);
g2.setFont(BIG);
Font font = BIG;
FontRenderContext frc = g2.getFontRenderContext();
TextLayout layout = new TextLayout("ABC", font, frc);
// layout.draw(g2, 20, getHeight() - 20);
Shape outline = layout.getOutline(AffineTransform.getTranslateInstance(20, getHeight() - 20));
PathIterator pi = outline.getPathIterator(null);
float[] coords = new float[6];
while (!pi.isDone()) {
	int segmentType = pi.currentSegment(coords);
	switch (segmentType) {
	case PathIterator.SEG_CLOSE:
		System.out.println("SEG_CLOSE");
		break;
	case PathIterator.SEG_MOVETO:
		System.out.println(String.format("SEG_MOVETO: (%.2f, %.2f)", coords[0], coords[1]));
		break;
	case PathIterator.SEG_LINETO:
		System.out.println(String.format("SEG_LINETO: (%.2f, %.2f)", coords[0], coords[1]));
		break;
	case PathIterator.SEG_QUADTO:
		System.out.println(String.format("SEG_QUADTO: (%.2f, %.2f, %.2f, %.2f)",
				coords[0], coords[1], coords[2], coords[3]));
		break;
	case PathIterator.SEG_CUBICTO:
		System.out.println(String.format("SEG_CUBICTO: (%.2f, %.2f, %.2f, %.2f, %.2f, %.2f)",
				coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]));
		break;
	default:
		System.out.println("??");
	}
	pi.next();
}
g2.draw(outline);
Rectangle2D bounds = layout.getBounds();
bounds.setRect(bounds.getX() + 20,
		bounds.getY() + getHeight() - 20,
		bounds.getWidth(),
		bounds.getHeight());
g2.draw(bounds);